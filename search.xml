<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>idea快捷键</title>
      <link href="/2019/12/22/idea%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2019/12/22/idea%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul><li><p>ctrl+alt+l   自动调整代码格式</p></li><li><p>alt+insert(generator)  自动生成get  set  toString</p></li><li><p>ctrl+h 查看类的继承关系</p></li><li><p>ctrl+alt+v  生成返回值对象</p></li><li><p>ctrl+alt+t   单元块测试  surround with try catch…</p></li><li><p>ctrl+j  查看所有模板</p></li><li><p>ctrl+alt+shift+t  重构</p></li><li><p>ctrl+alt+m  将代码提取成方法</p></li><li><p>设置快捷键补全代码块</p></li></ul><p><img src="/" class="lazyload" data-src="http://q9c3c6b0h.bkt.clouddn.com/clipboard.png"  alt="Image text"></p>]]></content>
      
      
      <categories>
          
          <category> 使用技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax</title>
      <link href="/2019/10/26/ajax/"/>
      <url>/2019/10/26/ajax/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jquery</title>
      <link href="/2019/10/26/jquery/"/>
      <url>/2019/10/26/jquery/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node学习笔记</title>
      <link href="/2019/10/26/nodejs01/"/>
      <url>/2019/10/26/nodejs01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Node介绍"><a href="#Node介绍" class="headerlink" title="Node介绍"></a>Node介绍</h1><h2 id="为什么要学习Node-js"><a href="#为什么要学习Node-js" class="headerlink" title="为什么要学习Node.js"></a>为什么要学习Node.js</h2><ul><li>企业需求<ul><li>具有服务端开发经验更改</li><li>front-end</li><li>back-end</li><li>全栈开发工程师</li><li>基本的网站开发能力<ul><li>服务端</li><li>前端</li><li>运维部署</li></ul></li><li>多人社区</li></ul></li></ul><p><a href="https://github.com/smallC-L-Y/Demo/blob/notes/nodeJS学习笔记.md" target="_blank" rel="noopener">/<img src="" class="lazyload" data-src=""  alt="image-20200317114503403"></a></p><h2 id="Node-js是什么"><a href="#Node-js是什么" class="headerlink" title="Node.js是什么"></a>Node.js是什么</h2><ul><li>Node.js是JavaScript 运行时</li><li>通俗易懂的讲，Node.js是JavaScript的运行平台</li><li>Node.js既不是语言，也不是框架，它是一个平台</li><li>浏览器中的JavaScript<ul><li>EcmaScript<ul><li>基本语法</li><li>if</li><li>var</li><li>function</li><li>Object</li><li>Array</li></ul></li><li>Bom</li><li>Dom</li></ul></li><li>Node.js中的JavaScript<ul><li>没有Bom，Dom</li><li>EcmaScript</li><li>在Node中这个JavaScript执行环境为JavaScript提供了一些服务器级别的API<ul><li>例如文件的读写</li><li>网络服务的构建</li><li>网络通信</li><li>http服务器</li></ul></li></ul></li><li>构建与Chrome的V8引擎之上<ul><li>代码只是具有特定格式的字符串</li><li>引擎可以认识它，帮你解析和执行</li><li>Google Chrome的V8引擎是目前公认的解析执行JavaScript代码最快的</li><li>Node.js的作者把Google Chrome中的V8引擎移植出来，开发了一个独立的JavaScript运行时环境</li></ul></li><li>Node.js uses an envent-driven,non-blocking I/O mode that makes it lightweight and efficent.<ul><li>envent-driven 事件驱动</li><li>non-blocking I/O mode 非阻塞I/O模型（异步）</li><li>ightweight and efficent. 轻量和高效</li></ul></li><li>Node.js package ecosystem,npm,is the larget scosystem of open sourcr libraries in the world<ul><li>npm 是世界上最大的开源生态系统</li><li>绝大多数JavaScript相关的包都存放在npm上，这样做的目的是为了让开发人员更方便的去下载使用</li><li>npm install jquery</li></ul></li></ul><h2 id="Node能做什么"><a href="#Node能做什么" class="headerlink" title="Node能做什么"></a>Node能做什么</h2><ul><li>web服务器后台</li><li>命令行工具<ul><li>npm(node)</li><li>git(c语言)</li><li>hexo（node）</li><li>…</li></ul></li><li>对于前端工程师来讲，接触最多的是它的命令行工具<ul><li>自己写的很少，主要是用别人第三方的</li><li>webpack</li><li>gulp</li><li>npm</li></ul></li></ul><h1 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h1><h2 id="安装Node环境"><a href="#安装Node环境" class="headerlink" title="安装Node环境"></a>安装Node环境</h2><ul><li>查看Node环境的版本号</li><li>下载：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></li><li>安装：<ul><li>傻瓜式安装，一路<code>next</code></li><li>安装过再次安装会升级</li></ul></li><li>确认Node环境是否安装成功<ul><li>查看node的版本号：<code>node --version</code></li><li>或者<code>node -v</code></li></ul></li><li>配置环境变量</li></ul><h2 id="解析执行JavaScript"><a href="#解析执行JavaScript" class="headerlink" title="解析执行JavaScript"></a>解析执行JavaScript</h2><ol><li>创建编写JavaScript脚本文件</li><li>打开终端，定位脚本文件的所属目录</li><li>输入<code>node 文件名</code>执行对应的文件</li></ol><p>注意：文件名不要用<code>node.js</code>来命名，也就是说除了<code>node</code>这个名字随便起，最好不要使用中文。</p><h2 id="文件的读写"><a href="#文件的读写" class="headerlink" title="文件的读写"></a>文件的读写</h2><p>文件读取:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//浏览器中的JavaScript是没有文件操作能力的</span></span><br><span class="line"><span class="comment">//但是Node中的JavaScript具有文件操作能力</span></span><br><span class="line"><span class="comment">//fs是file-system的简写，就是文件系统的意思</span></span><br><span class="line"><span class="comment">//在Node中如果想要进行文件的操作就必须引用fs这个核心模块</span></span><br><span class="line"><span class="comment">//在fs这个和兴模块中，就提供了人所有文件操作相关的API</span></span><br><span class="line"><span class="comment">//例如 fs.readFile就是用来读取文件的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  1.使用fs核心模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.读取文件</span></span><br><span class="line">fs.readFile(<span class="string">'./data/a.txt'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'文件读取失败'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>文件写入：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  1.使用fs核心模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.将数据写入文件</span></span><br><span class="line">fs.writeFile(<span class="string">'./data/a.txt'</span>,<span class="string">'我是文件写入的信息'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'文件写入失败'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>服务器：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.加载http核心模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.使用http.createServer()创建一个web服务器</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.服务器要做的事儿</span></span><br><span class="line"><span class="comment">// 提供服务：对数据服务</span></span><br><span class="line"><span class="comment">// 发请求</span></span><br><span class="line"><span class="comment">//  接收请求</span></span><br><span class="line"><span class="comment">//  处理请求</span></span><br><span class="line"><span class="comment">//  反馈（发送响应）</span></span><br><span class="line"><span class="comment">//  当客户端请求过来，就会自动触发服务器的request请求事件，然后执行第二个参数：回调处理函数</span></span><br><span class="line">server.on(<span class="string">'request'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'收到客户的请求了'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.绑定端口号，启动服务</span></span><br><span class="line">server.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'runing...'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Node中的模块系统"><a href="#Node中的模块系统" class="headerlink" title="Node中的模块系统"></a>Node中的模块系统</h1><p>使用Node编写应用程序主要就是在使用：</p><ul><li>EcmaScript语言<ul><li>和浏览器一样，在Node中没有Bom和Dom</li></ul></li><li>核心模块<ul><li>文件操作的fs</li><li>http服务操作的http</li><li>url路径操作模块</li><li>path路径处理模块</li><li>os操作系统信息</li></ul></li><li>第三方模块<ul><li>art-template</li><li>必须通过npm来下载才可以使用</li></ul></li><li>自己写的模块<ul><li>自己创建的文件</li></ul></li></ul><h2 id="什么是模块化"><a href="#什么是模块化" class="headerlink" title="什么是模块化"></a>什么是模块化</h2><ul><li>文件作用域(模块是独立的，在不同的文件使用必须要重新引用)【在node中没有全局作用域，它是文件模块作用域】</li><li>通信规则<ul><li>加载require</li><li>导出exports</li></ul></li></ul><h2 id="CommonJS模块规范"><a href="#CommonJS模块规范" class="headerlink" title="CommonJS模块规范"></a>CommonJS模块规范</h2><p>在Node中的JavaScript还有一个重要的概念，模块系统。</p><ul><li><p>模块作用域</p></li><li><p>使用require方法来加载模块</p></li><li><p>使用exports接口对象来导出模板中的成员</p><h3 id="加载require"><a href="#加载require" class="headerlink" title="加载require"></a>加载<code>require</code></h3><p>语法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var 自定义变量名 &#x3D; require(&#39;模块&#39;)</span><br></pre></td></tr></table></figure><p>作用：</p><ul><li>执行被加载模块中的代码</li><li>得到被加载模块中的<code>exports</code>导出接口对象</li></ul><h3 id="导出exports"><a href="#导出exports" class="headerlink" title="导出exports"></a>导出<code>exports</code></h3><ul><li><p>Node中是模块作用域，默认文件中所有的成员只在当前模块有效</p></li><li><p>对于希望可以被其他模块访问到的成员，我们需要把这些公开的成员都挂载到<code>exports</code>接口对象中就可以了</p><p>导出多个成员（必须在对象中）：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">exports.a = <span class="number">123</span>;</span><br><span class="line">exports.b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'bbb'</span>)</span><br><span class="line">&#125;;</span><br><span class="line">exports.c = &#123;</span><br><span class="line">    foo:<span class="string">"bar"</span></span><br><span class="line">&#125;;</span><br><span class="line">exports.d = <span class="string">'hello'</span>;</span><br></pre></td></tr></table></figure><p>导出单个成员（拿到的就是函数，字符串）：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="string">'hello'</span>;</span><br></pre></td></tr></table></figure><p>以下情况会覆盖：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="string">'hello'</span>;</span><br><span class="line"><span class="comment">//后者会覆盖前者</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以通过以下方法来导出多个成员：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    foo = <span class="string">'hello'</span>,</span><br><span class="line">    add:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="模块原理"><a href="#模块原理" class="headerlink" title="模块原理"></a>模块原理</h2><p>exports和<code>module.exports</code>的一个引用：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(exports === <span class="built_in">module</span>.exports);    <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">exports.foo = <span class="string">'bar'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="built_in">module</span>.exports.foo = <span class="string">'bar'</span>;</span><br><span class="line">当给exports重新赋值后，exports！= <span class="built_in">module</span>.exports.</span><br><span class="line">最终<span class="keyword">return</span>的是<span class="built_in">module</span>.exports,无论exports中的成员是什么都没用。</span><br><span class="line">真正去使用的时候：</span><br><span class="line">    导出单个成员：exports.xxx = xxx;</span><br><span class="line">    导出多个成员：<span class="built_in">module</span>.exports 或者 modeule.exports = &#123;&#125;;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用服务</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 引用模板</span></span><br><span class="line"><span class="keyword">var</span> template = <span class="built_in">require</span>(<span class="string">'art-template'</span>);</span><br><span class="line"><span class="comment">// 创建服务</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"><span class="comment">// 公共路径</span></span><br><span class="line"><span class="keyword">var</span> wwwDir = <span class="string">'D:/app/www'</span>;</span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = req.url;</span><br><span class="line">    <span class="comment">// 读取文件</span></span><br><span class="line">    fs.readFile(<span class="string">'./template-apche.html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.end(<span class="string">'404 Not Found'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        fs.readdir(wwwDir, <span class="function"><span class="keyword">function</span> (<span class="params">err, files</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="keyword">return</span> res.end(<span class="string">'Can not find www Dir.'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 使用模板引擎解析替换data中的模板字符串</span></span><br><span class="line">            <span class="comment">// 去xmpTempleteList.html中编写模板语法</span></span><br><span class="line">            <span class="keyword">var</span> htmlStr = template.render(data.toString(), &#123; </span><br><span class="line">                title: <span class="string">'D:/app/www/ 的索引'</span>,</span><br><span class="line">                files:files </span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 发送响应数据</span></span><br><span class="line">            res.end(htmlStr);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'running....'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="number">1.</span>jQuery中的each 和 原生JavaScript方法forEach的区别：</span><br><span class="line">    提供源头：</span><br><span class="line">        原生js是es5提供的（不兼容IE8）,</span><br><span class="line">        jQuery的each是jQuery第三方库提供的（如果要使用需要用<span class="number">2</span>以下的版本也就是<span class="number">1.</span>版本）,它的each方法主要用来遍历jQuery实例对象（伪数组）,同时也可以做低版本forEach的替代品,jQuery的实例对象不能使用forEach方法，如果想要使用必须转为数组（[].slice.call(jQuery实例对象)）才能使用</span><br><span class="line"><span class="number">2.</span>模块中导出多个成员和导出单个成员</span><br><span class="line"><span class="number">3.301</span>和<span class="number">302</span>的区别：</span><br><span class="line">    <span class="number">301</span>永久重定向,浏览器会记住</span><br><span class="line">    <span class="number">302</span>临时重定向</span><br><span class="line"><span class="number">4.</span>exports和<span class="built_in">module</span>.exports的区别:</span><br><span class="line">    每个模块中都有一个<span class="built_in">module</span>对象</span><br><span class="line">    <span class="built_in">module</span>对象中有一个exports对象</span><br><span class="line">    我们可以把需要导出的成员都挂载到<span class="built_in">module</span>.exports接口对象中</span><br><span class="line">    也就是<span class="string">`module.exports.xxx = xxx`</span>的方式</span><br><span class="line">    但是每次写太多了就很麻烦，所以Node为了简化代码，就在每一个模块中都提供了一个成员叫<span class="string">`exports`</span></span><br><span class="line">    <span class="string">`exports === module.exports`</span>结果为<span class="literal">true</span>,所以完全可以<span class="string">`exports.xxx = xxx`</span></span><br><span class="line">    当一个模块需要导出单个成员的时候必须使用<span class="string">`module.exports = xxx`</span>的方式，=,使用<span class="string">`exports = xxx`</span>不管用,因为每个模块最终<span class="keyword">return</span>的是<span class="built_in">module</span>.exports,而exports只是<span class="built_in">module</span>.exports的一个引用,所以<span class="string">`exports`</span>即使重新赋值,也不会影响<span class="string">`module.exports`</span>。</span><br><span class="line">    有一种赋值方式比较特殊：<span class="string">`exports = module.exports`</span>这个用来新建立引用关系的。</span><br></pre></td></tr></table></figure><h1 id="require的加载规则"><a href="#require的加载规则" class="headerlink" title="require的加载规则"></a>require的加载规则</h1><ul><li>核心模块<ul><li>模块名</li></ul></li><li>第三方模块<ul><li>模块名</li></ul></li><li>用户自己写的<ul><li>路径</li></ul></li></ul><h2 id="require的加载规则："><a href="#require的加载规则：" class="headerlink" title="require的加载规则："></a>require的加载规则：</h2><ul><li><p>优先从缓存加载</p></li><li><p>判断模块标识符</p><ul><li><p>核心模块</p></li><li><p>自己写的模块（路径形式的模块）</p></li><li><p>第三方模块（node_modules）</p><ul><li><p>第三方模块的标识就是第三方模块的名称（不可能有第三方模块和核心模块的名字一致）</p></li><li><p>npm</p><ul><li>开发人员可以把写好的框架库发布到npm上</li><li>使用者通过npm命令来下载</li></ul></li><li><p>使用方式：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 名称 = <span class="built_in">require</span>(<span class="string">'npm install【下载包】 的包名'</span>)</span><br></pre></td></tr></table></figure><ul><li>node_modules/express/package.json main</li><li>如果package.json或者main不成立，则查找被选择项：index.js</li><li>如果以上条件都不满足，则继续进入上一级目录中的node_modules按照上面的规则依次查找，直到当前文件所属此盘根目录都找不到最后报错</li></ul></li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果非路径形式的标识</span></span><br><span class="line"><span class="comment">// 路径形式的标识：</span></span><br><span class="line">    <span class="comment">// ./  当前目录 不可省略</span></span><br><span class="line">    <span class="comment">// ../  上一级目录  不可省略</span></span><br><span class="line">    <span class="comment">//  /xxx也就是D:/xxx</span></span><br><span class="line">    <span class="comment">// 带有绝对路径几乎不用（D:/a/foo.js）</span></span><br><span class="line"><span class="comment">// 首位表示的是当前文件模块所属磁盘根目录</span></span><br><span class="line"><span class="comment">// require('./a'); </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 核心模块</span></span><br><span class="line"><span class="comment">// 核心模块本质也是文件，核心模块文件已经被编译到了二进制文件中了，我们只需要按照名字来加载就可以了</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'fs'</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三方模块</span></span><br><span class="line"><span class="comment">// 凡是第三方模块都必须通过npm下载（npm i node_modules），使用的时候就可以通过require('包名')来加载才可以使用</span></span><br><span class="line"><span class="comment">// 第三方包的名字不可能和核心模块的名字是一样的</span></span><br><span class="line"><span class="comment">// 既不是核心模块，也不是路径形式的模块</span></span><br><span class="line"><span class="comment">//      先找到当前文所述目录的node_modules</span></span><br><span class="line"><span class="comment">//      然后找node_modules/art-template目录</span></span><br><span class="line"><span class="comment">//      node_modules/art-template/package.json</span></span><br><span class="line"><span class="comment">//      node_modules/art-template/package.json中的main属性</span></span><br><span class="line"><span class="comment">//      main属性记录了art-template的入口模块</span></span><br><span class="line"><span class="comment">//      然后加载使用这个第三方包</span></span><br><span class="line"><span class="comment">//      实际上最终加载的还是文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//      如果package.json不存在或者mian指定的入口模块不存在</span></span><br><span class="line"><span class="comment">//      则node会自动找该目录下的index.js</span></span><br><span class="line"><span class="comment">//      也就是说index.js是一个备选项，如果main没有指定，则加载index.js文件</span></span><br><span class="line"><span class="comment">//      </span></span><br><span class="line">        <span class="comment">// 如果条件都不满足则会进入上一级目录进行查找</span></span><br><span class="line"><span class="comment">// 注意：一个项目只有一个node_modules，放在项目根目录中，子目录可以直接调用根目录的文件</span></span><br><span class="line"><span class="keyword">var</span> template = <span class="built_in">require</span>(<span class="string">'art-template'</span>);</span><br></pre></td></tr></table></figure><h2 id="模块标识符中的-和文件操作路径中的"><a href="#模块标识符中的-和文件操作路径中的" class="headerlink" title="模块标识符中的/和文件操作路径中的/"></a>模块标识符中的<code>/</code>和文件操作路径中的<code>/</code></h2><p>文件操作路径：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 咱们所使用的所有文件操作的API都是异步的</span></span><br><span class="line"><span class="comment">// 就像ajax请求一样</span></span><br><span class="line"><span class="comment">// 读取文件</span></span><br><span class="line"><span class="comment">// 文件操作中 ./ 相当于当前模块所处磁盘根目录</span></span><br><span class="line"><span class="comment">// ./index.txt    相对于当前目录</span></span><br><span class="line"><span class="comment">// /index.txt    相对于当前目录</span></span><br><span class="line"><span class="comment">// /index.txt   绝对路径,当前文件模块所处根目录</span></span><br><span class="line"><span class="comment">// d:express/index.txt   绝对路径</span></span><br><span class="line">fs.readFile(<span class="string">'./index.txt'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">       <span class="keyword">return</span>  <span class="built_in">console</span>.log(<span class="string">'读取失败'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>模块操作路径：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在模块加载中，相对路径中的./不能省略</span></span><br><span class="line"><span class="comment">// 这里省略了.也是磁盘根目录</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./index'</span>)(<span class="string">'hello'</span>)</span><br></pre></td></tr></table></figure><h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><ul><li>node package manage(node包管理器)</li><li>通过npm命令安装jQuery包（npm install –save jquery），在安装时加上–save会主动生成说明书文件信息（将安装文件的信息添加到package.json里面）</li></ul><h3 id="npm网站"><a href="#npm网站" class="headerlink" title="npm网站"></a>npm网站</h3><blockquote><p> npmjs.com 网站 是用来搜索npm包的</p></blockquote><h3 id="npm命令行工具"><a href="#npm命令行工具" class="headerlink" title="npm命令行工具"></a>npm命令行工具</h3><p>npm是一个命令行工具，只要安装了node就已经安装了npm。</p><p>npm也有版本概念，可以通过<code>npm --version</code>来查看npm的版本</p><p>升级npm(自己升级自己)：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install --global npm</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>npm init(生成package.json说明书文件)<ul><li>npm init -y(可以跳过向导，快速生成)</li></ul></li><li>npm install<ul><li>一次性把dependencies选项中的依赖项全部安装</li><li>简写（npm i）</li></ul></li><li>npm install 包名<ul><li>只下载</li><li>简写（npm i 包名）</li></ul></li><li>npm install –save 包名<ul><li>下载并且保存依赖项（package.json文件中的dependencies选项）</li><li>简写（npm i 包名）</li></ul></li><li>npm uninstall 包名<ul><li>只删除，如果有依赖项会依然保存</li><li>简写（npm un 包名）</li></ul></li><li>npm uninstall –save 包名<ul><li>删除的同时也会把依赖信息全部删除</li><li>简写（npm un 包名）</li></ul></li><li>npm help<ul><li>查看使用帮助</li></ul></li><li>npm 命令 –help<ul><li>查看具体命令的使用帮助（npm uninstall –help）</li></ul></li></ul><h3 id="解决npm被墙问题"><a href="#解决npm被墙问题" class="headerlink" title="解决npm被墙问题"></a>解决npm被墙问题</h3><p>npm存储包文件的服务器在国外，有时候会被墙，速度很慢，所以需要解决这个问题。</p><blockquote><p><a href="https://developer.aliyun.com/mirror/NPM?from=tnpm淘宝的开发团队把npm在国内做了一个镜像（也就是一个备份）。" target="_blank" rel="noopener">https://developer.aliyun.com/mirror/NPM?from=tnpm淘宝的开发团队把npm在国内做了一个镜像（也就是一个备份）。</a></p></blockquote><p>安装淘宝的cnpm：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org;</span></span><br><span class="line">#在任意目录执行都可以</span><br><span class="line">#--global表示安装到全局，而非当前目录</span><br><span class="line">#--global不能省略，否则不管用</span><br><span class="line">npm install --global cnpm</span><br></pre></td></tr></table></figure><p>安装包的时候把以前的<code>npm</code>替换成<code>cnpm</code>。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#走国外的npm服务器下载jQuery包，速度比较慢</span><br><span class="line">npm install jQuery;</span><br><span class="line"></span><br><span class="line">#使用cnpm就会通过淘宝的服务器来下载jQuery</span><br><span class="line">cnpm install jQuery;</span><br></pre></td></tr></table></figure><p>如果不想安装<code>cnpm</code>又想使用淘宝的服务器来下载：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install jquery --registry=https:<span class="comment">//npm.taobao.org;</span></span><br></pre></td></tr></table></figure><p>但是每次手动加参数就很麻烦，所以我们可以把这个选项加入到配置文件中：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm config <span class="keyword">set</span> registry https://npm.taobao.org;</span><br><span class="line"></span><br><span class="line">#查看npm配置信息</span><br><span class="line">npm config list;</span><br></pre></td></tr></table></figure><p>只要经过上面的配置命令，则以后所有的<code>npm install</code>都会通过淘宝的服务器来下载</p><h1 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h1><p>每一个项目都要有一个<code>package.json</code>文件（包描述文件，就像产品的说明书一样）</p><p>这个文件可以通过<code>npm init</code>自动初始化出来</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">code</span>\<span class="title">node</span>中的模块系统&gt;<span class="title">npm</span> <span class="title">init</span></span></span><br><span class="line"><span class="function"><span class="title">This</span> <span class="title">utility</span> <span class="title">will</span> <span class="title">walk</span> <span class="title">you</span> <span class="title">through</span> <span class="title">creating</span> <span class="title">a</span> <span class="title">package.json</span> <span class="title">file</span>.</span></span><br><span class="line"><span class="function"><span class="title">It</span> <span class="title">only</span> <span class="title">covers</span> <span class="title">the</span> <span class="title">most</span> <span class="title">common</span> <span class="title">items</span>, <span class="title">and</span> <span class="title">tries</span> <span class="title">to</span> <span class="title">guess</span> <span class="title">sensible</span> <span class="title">defaults</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">See</span> `<span class="title">npm</span> <span class="title">help</span> <span class="title">json</span>` <span class="title">for</span> <span class="title">definitive</span> <span class="title">documentation</span> <span class="title">on</span> <span class="title">these</span> <span class="title">fields</span></span></span><br><span class="line"><span class="function"><span class="title">and</span> <span class="title">exactly</span> <span class="title">what</span> <span class="title">they</span> <span class="title">do</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Use</span> `<span class="title">npm</span> <span class="title">install</span> &lt;<span class="title">pkg</span>&gt;` <span class="title">afterwards</span> <span class="title">to</span> <span class="title">install</span> <span class="title">a</span> <span class="title">package</span> <span class="title">and</span></span></span><br><span class="line"><span class="function"><span class="title">save</span> <span class="title">it</span> <span class="title">as</span> <span class="title">a</span> <span class="title">dependency</span> <span class="title">in</span> <span class="title">the</span> <span class="title">package.json</span> <span class="title">file</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Press</span> ^<span class="title">C</span> <span class="title">at</span> <span class="title">any</span> <span class="title">time</span> <span class="title">to</span> <span class="title">quit</span>.</span></span><br><span class="line"><span class="function"><span class="title">package</span> <span class="title">name</span>: (<span class="title">node</span>中的模块系统)</span></span><br><span class="line"><span class="function"><span class="title">Sorry</span>, <span class="title">name</span> <span class="title">can</span> <span class="title">only</span> <span class="title">contain</span> <span class="title">URL</span>-<span class="title">friendly</span> <span class="title">characters</span>.</span></span><br><span class="line"><span class="function"><span class="title">package</span> <span class="title">name</span>: (<span class="title">node</span>中的模块系统) <span class="title">cls</span></span></span><br><span class="line"><span class="function"><span class="title">version</span>: (1.0.0)</span></span><br><span class="line"><span class="function"><span class="title">description</span>: 这是一个测试项目</span></span><br><span class="line"><span class="function"><span class="title">entry</span> <span class="title">point</span>: (<span class="title">main.js</span>)</span></span><br><span class="line"><span class="function"><span class="title">test</span> <span class="title">command</span>:</span></span><br><span class="line"><span class="function"><span class="title">git</span> <span class="title">repository</span>:</span></span><br><span class="line"><span class="function"><span class="title">keywords</span>:</span></span><br><span class="line"><span class="function"><span class="title">author</span>: <span class="title">xiaochen</span></span></span><br><span class="line"><span class="function"><span class="title">license</span>: (<span class="title">ISC</span>)</span></span><br><span class="line"><span class="function"><span class="title">About</span> <span class="title">to</span> <span class="title">write</span> <span class="title">to</span> <span class="title">D</span>:\<span class="title">code</span>\<span class="title">node</span>中的模块系统\<span class="title">package.json</span>:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&#123;</span></span><br><span class="line"><span class="function">  "<span class="title">name</span>": "<span class="title">cls</span>",</span></span><br><span class="line"><span class="function">  "<span class="title">version</span>": "1.0.0",</span></span><br><span class="line"><span class="function">  "<span class="title">description</span>": "这是一个测试项目",</span></span><br><span class="line"><span class="function">  "<span class="title">main</span>": "<span class="title">main.js</span>",</span></span><br><span class="line"><span class="function">  "<span class="title">scripts</span>": &#123;</span></span><br><span class="line"><span class="function">    "<span class="title">test</span>": "<span class="title">echo</span> \"<span class="title">Error</span>: <span class="title">no</span> <span class="title">test</span> <span class="title">specified</span>\" &amp;&amp; <span class="title">exit</span> 1"</span></span><br><span class="line"><span class="function">  &#125;,</span></span><br><span class="line"><span class="function">  "<span class="title">author</span>": "<span class="title">xiaochen</span>",</span></span><br><span class="line"><span class="function">  "<span class="title">license</span>": "<span class="title">ISC</span>"</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Is</span> <span class="title">this</span> <span class="title">OK</span>? (<span class="title">yes</span>) <span class="title">yes</span></span></span><br></pre></td></tr></table></figure><p>对于目前来讲，最有用的是<code>dependencies</code>选项，可以用来帮助我们保存第三方包的依赖信息。</p><p>如果<code>node_modules</code>删除了也不用担心，只需要在控制面板中<code>npm install</code>就会自动把<code>package.json</code>中的<code>dependencies</code>中所有的依赖项全部都下载回来。</p><ul><li>建议每个项目的根目录下都有一个<code>package.json</code>文件</li><li>建议执行<code>npm install 包名</code>的时候都加上<code>--save</code>选项，目的是用来保存依赖信息</li></ul><h2 id="package-json和package-lock-json"><a href="#package-json和package-lock-json" class="headerlink" title="package.json和package-lock.json"></a>package.json和package-lock.json</h2><p>npm 5以前是不会有<code>package-lock.json</code>这个文件</p><p>npm5以后才加入这个文件</p><p>当你安装包的时候，npm都会生成或者更新<code>package-lock.json</code>这个文件</p><ul><li><p>npm5以后的版本安装都不要加<code>--save</code>参数，它会自动保存依赖信息</p></li><li><p>当你安装包的时候，会自动创建或者更新<code>package-lock.json</code>文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package-lock.json</span><br></pre></td></tr></table></figure><p>这个文件会包含</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node_modules</span><br></pre></td></tr></table></figure><p>中所有包的信息（版本，下载地址。。。）</p><ul><li>这样的话重新<code>npm install</code>的时候速度就可以提升</li></ul></li><li><p>从文件来看，有一个</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lock</span><br></pre></td></tr></table></figure><p>称之为锁</p><ul><li>这个<code>lock</code>使用来锁版本的</li><li>如果项目依赖了<code>1.1.1</code>版本</li><li>如果你重新install其实会下载最细版本，而不是<code>1.1.1</code></li><li><code>package-lock.json</code>的另外一个作用就是锁定版本号，防止自动升级</li></ul></li></ul><h2 id="path路径操作模块"><a href="#path路径操作模块" class="headerlink" title="path路径操作模块"></a>path路径操作模块</h2><blockquote><p>参考文档：<a href="https://nodejs.org/docs/latest-v13.x/api/path.html" target="_blank" rel="noopener">https://nodejs.org/docs/latest-v13.x/api/path.html</a></p></blockquote><ul><li>path.basename：获取路径的文件名，默认包含扩展名</li><li>path.dirname：获取路径中的目录部分</li><li>path.extname：获取一个路径中的扩展名部分</li><li>path.parse：把路径转换为对象<ul><li>root：根路径</li><li>dir：目录</li><li>base：包含后缀名的文件名</li><li>ext：后缀名</li><li>name：不包含后缀名的文件名</li></ul></li><li>path.join：拼接路径</li><li>path.isAbsolute：判断一个路径是否为绝对路径<a href="https://github.com/smallC-L-Y/Demo/blob/notes/nodeJS学习笔记.md" target="_blank" rel="noopener">/<img src="" class="lazyload" data-src=""  alt="image-20200315150610001"></a></li></ul><h1 id="Node中的其它成员-dirname-filename"><a href="#Node中的其它成员-dirname-filename" class="headerlink" title="Node中的其它成员(dirname,filename)"></a>Node中的其它成员(<strong>dirname,</strong>filename)</h1><ul><li><p>在每个模块中，除了<code>require</code>,<code>exports</code>等模块相关的API之外，还有两个特殊的成员：</p></li><li><p><code>__dirname</code>，是一个成员，可以用来<strong>动态</strong>获取当前文件模块所属目录的绝对路径</p></li><li><p><code>__filename</code>，可以用来<strong>动态</strong>获取当前文件的绝对路径（包含文件名）</p></li><li><p><code>__dirname</code>和<code>filename</code>是不受执行node命令所属路径影响的</p><p><a href="https://github.com/smallC-L-Y/Demo/blob/notes/nodeJS学习笔记.md" target="_blank" rel="noopener">/<img src="" class="lazyload" data-src=""  alt="image-20200315151551873"></a></p></li></ul><p>在文件操作中，使用相对路径是不可靠的，因为node中文件操作的路径被设计为相对于执行node命令所处的路径。</p><p>所以为了解决这个问题，只需要把相对路径变为绝对路径（绝对路径不受任何影响）就可以了。</p><p>就可以使用<code>__dirname</code>或者<code>__filename</code>来帮助我们解决这个问题</p><p>在拼接路径的过程中，为了避免手动拼接带来的一些低级错误，推荐使用<code>path.join()</code>来辅助拼接</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(__dirname + 'a.txt');</span></span><br><span class="line"><span class="comment">// path.join方法会将文件操作中的相对路径都统一的转为动态的绝对路径</span></span><br><span class="line">fs.readFile(path.join(__dirname + <span class="string">'/a.txt'</span>),<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">throw</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>补充：模块中的路径标识和这里的路径没关系，不受影响（就是相对于文件模块）</p></blockquote><blockquote><p><strong>注意：</strong></p><p><strong>模块中的路径标识和文件操作中的相对路径标识不一致</strong></p><p><strong>模块中的路径标识就是相对于当前文件模块，不受node命令所处路径影响</strong></p></blockquote><h1 id="Express（快速的）"><a href="#Express（快速的）" class="headerlink" title="Express（快速的）"></a>Express（快速的）</h1><p>作者：Tj</p><p>原生的http在某些方面表现不足以应对我们的开发需求，所以就需要使用框架来加快我们的开发效率，框架的目的就是提高效率，让我们的代码高度统一。</p><p>在node中有很多web开发框架。主要学习express</p><ul><li><code>http://expressjs.com/</code>,其中主要封装的是http。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1 安装</span></span><br><span class="line"><span class="comment">// 2 引包</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="comment">// 3 创建服务器应用程序</span></span><br><span class="line"><span class="comment">//      也就是原来的http.createServer();</span></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公开指定目录</span></span><br><span class="line"><span class="comment">// 只要通过这样做了，就可以通过/public/xx的方式来访问public目录中的所有资源</span></span><br><span class="line"><span class="comment">// 在Express中开放资源就是一个API的事</span></span><br><span class="line">app.use(<span class="string">'/public/'</span>,express.static(<span class="string">'/public/'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//模板引擎在Express中开放模板也是一个API的事</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当服务器收到get请求 / 的时候，执行回调处理函数</span></span><br><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">'hello express'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于server.listen</span></span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'app is runing at port 3000'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="学习Express"><a href="#学习Express" class="headerlink" title="学习Express"></a>学习Express</h3><h4 id="起步-1"><a href="#起步-1" class="headerlink" title="起步"></a>起步</h4><h5 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：<a href="https://github.com/smallC-L-Y/Demo/blob/notes/nodeJS学习笔记.md" target="_blank" rel="noopener">/<img src="" class="lazyload" data-src=""  alt="image-20200310123723079"></a></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install express</span><br></pre></td></tr></table></figure><h5 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world:"></a>hello world:<a href="https://github.com/smallC-L-Y/Demo/blob/notes/nodeJS学习笔记.md" target="_blank" rel="noopener">/<img src="" class="lazyload" data-src=""  alt="image-20200310124850557"></a></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入express</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 创建app</span></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">//  2. </span></span><br><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="comment">// res.write('Hello');</span></span><br><span class="line">    <span class="comment">// res.write('World');</span></span><br><span class="line">    <span class="comment">// res.end()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    <span class="comment">// res.end('hello world');</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">    res.send(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'express app is runing...'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="基本路由"><a href="#基本路由" class="headerlink" title="基本路由"></a>基本路由</h5><p>路由：</p><ul><li>请求方法</li><li>请求路径</li><li>请求处理函数</li></ul><p>get:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当你以get方法请求/的时候，执行对应的处理函数</span></span><br><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>post:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当你以post方法请求/的时候，执行对应的处理函数</span></span><br><span class="line">app.post(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="Express静态服务API"><a href="#Express静态服务API" class="headerlink" title="Express静态服务API"></a>Express静态服务API</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.use不仅仅是用来处理静态资源的，还可以做很多工作(body-parser的配置)</span></span><br><span class="line">app.use(express.static(<span class="string">'public'</span>));</span><br><span class="line"></span><br><span class="line">app.use(express.static(<span class="string">'files'</span>));</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/stataic'</span>,express.static(<span class="string">'public'</span>));</span><br><span class="line"><span class="comment">// 引入express</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建app</span></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开放静态资源</span></span><br><span class="line"><span class="comment">// 1.当以/public/开头的时候，去./public/目录中找对应资源</span></span><br><span class="line"><span class="comment">// 访问：http://127.0.0.1:3000/public/login.html</span></span><br><span class="line">app.use(<span class="string">'/public/'</span>,express.static(<span class="string">'./public/'</span>)); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.当省略第一个参数的时候，可以通过省略/public的方式来访问</span></span><br><span class="line"><span class="comment">// 访问：http://127.0.0.1:3000/login.html</span></span><br><span class="line"><span class="comment">// app.use(express.static('./public/'));   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.访问：http://127.0.0.1:3000/a/login.html</span></span><br><span class="line"><span class="comment">// a相当于public的别名</span></span><br><span class="line"><span class="comment">// app.use('/a/',express.static('./public/')); </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  </span></span><br><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.end(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'express app is runing...'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="在Express中配置使用art-templete模板引擎"><a href="#在Express中配置使用art-templete模板引擎" class="headerlink" title="在Express中配置使用art-templete模板引擎"></a>在Express中配置使用<code>art-templete</code>模板引擎</h5><ul><li><p><a href="https://aui.github.io/art-template/" target="_blank" rel="noopener">art-template官方文档</a></p></li><li><p>在node中，有很多第三方模板引擎都可以使用，不是只有</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">art-template</span><br></pre></td></tr></table></figure><ul><li>还有ejs，jade（pug），handlebars，nunjucks</li></ul></li></ul><p>安装：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install --save art-template</span><br><span class="line">npm install --save express-art-template</span><br><span class="line"></span><br><span class="line"><span class="comment">//两个一起安装</span></span><br><span class="line">npm i --save art-template express-art-template</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.engine(<span class="string">'html'</span>, <span class="built_in">require</span>(<span class="string">'express-art-template'</span>));</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// express默认会去views目录找index.html</span></span><br><span class="line">    res.render(<span class="string">'index.html'</span>,&#123;</span><br><span class="line">           title:<span class="string">'hello world'</span>     </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果希望修改默认的<code>views</code>视图渲染存储目录，可以：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一个参数views千万不要写错</span></span><br><span class="line">app.set(<span class="string">'views'</span>,目录路径);</span><br></pre></td></tr></table></figure><h5 id="在Express中获取表单请求数据"><a href="#在Express中获取表单请求数据" class="headerlink" title="在Express中获取表单请求数据"></a>在Express中获取表单请求数据</h5><h6 id="获取get请求数据："><a href="#获取get请求数据：" class="headerlink" title="获取get请求数据："></a>获取get请求数据：</h6><p>Express内置了一个api，可以直接通过<code>req.query</code>来获取数据</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 通过requery方法获取用户输入的数据</span><br><span class="line">&#x2F;&#x2F; req.query只能拿到get请求的数据</span><br><span class="line"> var comment &#x3D; req.query;</span><br></pre></td></tr></table></figure><h6 id="获取post请求数据："><a href="#获取post请求数据：" class="headerlink" title="获取post请求数据："></a>获取post请求数据：</h6><p>在Express中没有内置获取表单post请求体的api，这里我们需要使用一个第三方包<code>body-parser</code>来获取数据。</p><p>安装：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install --save body-parser;</span><br></pre></td></tr></table></figure><p>配置：</p><p>// 配置解析表单 POST 请求体插件（注意：一定要在 app.use(router) 之前 ）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="comment">// 引包</span></span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置body-parser</span></span><br><span class="line"><span class="comment">// 只要加入这个配置，则在req请求对象上会多出来一个属性：body</span></span><br><span class="line"><span class="comment">// 也就是说可以直接通过req.body来获取表单post请求数据</span></span><br><span class="line"><span class="comment">// parse application/x-www-form-urlencoded</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// parse application/json</span></span><br><span class="line">app.use(bodyParser.json())</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>)</span><br><span class="line">  res.write(<span class="string">'you posted:\n'</span>)</span><br><span class="line">  <span class="comment">// 可以通过req.body来获取表单请求数据</span></span><br><span class="line">  res.end(<span class="built_in">JSON</span>.stringify(req.body, <span class="literal">null</span>, <span class="number">2</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="在Express中配置使用express-session插件操作"><a href="#在Express中配置使用express-session插件操作" class="headerlink" title="在Express中配置使用express-session插件操作"></a>在Express中配置使用<code>express-session</code>插件操作</h3><blockquote><p>参考文档：<a href="https://github.com/expressjs/session" target="_blank" rel="noopener">https://github.com/expressjs/session</a></p></blockquote><p>安装：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install express-session</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该插件会为req请求对象添加一个成员:req.session默认是一个对象</span></span><br><span class="line"><span class="comment">//这是最简单的配置方式</span></span><br><span class="line"><span class="comment">//Session是基于Cookie实现的</span></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">  <span class="comment">//配置加密字符串，他会在原有的基础上和字符串拼接起来去加密</span></span><br><span class="line">  <span class="comment">//目的是为了增加安全性，防止客户端恶意伪造</span></span><br><span class="line">  secret: <span class="string">'keyboard cat'</span>,</span><br><span class="line">  resave: <span class="literal">false</span>,</span><br><span class="line">  saveUninitialized: <span class="literal">true</span>,<span class="comment">//无论是否适用Session，都默认直接分配一把钥匙</span></span><br><span class="line">  cookie: &#123; <span class="attr">secure</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读</span></span><br><span class="line"><span class="comment">//添加Session数据</span></span><br><span class="line"><span class="comment">//session就是一个对象</span></span><br><span class="line">req.session.foo = <span class="string">'bar'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写</span></span><br><span class="line"><span class="comment">//获取session数据</span></span><br><span class="line">req.session.foo</span><br><span class="line"></span><br><span class="line"><span class="comment">//删</span></span><br><span class="line">req.session.foo = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">delete</span> req.session.foo</span><br></pre></td></tr></table></figure><p>提示：</p><p>默认Session数据时内存储数据，服务器一旦重启，真正的生产环境会把Session进行持久化存储。</p><h3 id="利用Express实现ADUS项目"><a href="#利用Express实现ADUS项目" class="headerlink" title="利用Express实现ADUS项目"></a>利用Express实现ADUS项目</h3><h4 id="模块化思想"><a href="#模块化思想" class="headerlink" title="模块化思想"></a>模块化思想</h4><p>模块如何划分:</p><ul><li>模块职责要单一</li></ul><p>javascript模块化：</p><ul><li>Node 中的 CommonJS</li><li>浏览器中的：<ul><li>AMD require.js</li><li>CMD sea.js</li></ul></li><li>es6中增加了官方支持</li></ul><h4 id="起步-2"><a href="#起步-2" class="headerlink" title="起步"></a>起步</h4><ul><li>初始化</li><li>模板处理</li></ul><h4 id="路由设计"><a href="#路由设计" class="headerlink" title="路由设计"></a>路由设计</h4><table><thead><tr><th>请求方法</th><th>请求路径</th><th>get参数</th><th>post参数</th><th>备注</th></tr></thead><tbody><tr><td>GET</td><td>/students</td><td></td><td></td><td>渲染首页</td></tr><tr><td>GET</td><td>/students/new</td><td></td><td></td><td>渲染添加学生页面</td></tr><tr><td>POST</td><td>/students/new</td><td></td><td>name,age,gender,hobbies</td><td>处理添加学生请求</td></tr><tr><td>GET</td><td>/students/edit</td><td>id</td><td></td><td>渲染编辑页面</td></tr><tr><td>POST</td><td>/students/edit</td><td></td><td>id,name,age,gender,hobbies</td><td>处理编辑请求</td></tr><tr><td>GET</td><td>/students/delete</td><td>id</td><td></td><td>处理删除请求</td></tr></tbody></table><h4 id="提取路由模块"><a href="#提取路由模块" class="headerlink" title="提取路由模块"></a>提取路由模块</h4><p>router.js:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * router.js路由模块</span></span><br><span class="line"><span class="comment"> * 职责：</span></span><br><span class="line"><span class="comment"> *      处理路由</span></span><br><span class="line"><span class="comment"> *      根据不同的请求方法+请求路径设置具体的请求函数</span></span><br><span class="line"><span class="comment"> * 模块职责要单一，我们划分模块的目的就是增强代码的可维护性，提升开发效率</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Express专门提供了一种更好的方式</span></span><br><span class="line"><span class="comment">// 专门用来提供路由的</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="comment">// 1 创建一个路由容器</span></span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="comment">// 2 把路由都挂载到路由容器中</span></span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/students'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// res.send('hello world');</span></span><br><span class="line">    <span class="comment">// readFile的第二个参数是可选的，传入utf8就是告诉他把读取到的文件直接按照utf8编码，直接转成我们认识的字符</span></span><br><span class="line">    <span class="comment">// 除了这样来转换，也可以通过data.toString（）来转换</span></span><br><span class="line">    fs.readFile(<span class="string">'./db.json'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.status(<span class="number">500</span>).send(<span class="string">'Server error.'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 读取到的文件数据是string类型的数据</span></span><br><span class="line">        <span class="comment">// console.log(data);</span></span><br><span class="line">        <span class="comment">// 从文件中读取到的数据一定是字符串，所以一定要手动转换成对象</span></span><br><span class="line">        <span class="keyword">var</span> students = <span class="built_in">JSON</span>.parse(data).students;</span><br><span class="line">        res.render(<span class="string">'index.html'</span>, &#123;</span><br><span class="line">            <span class="comment">// 读取文件数据</span></span><br><span class="line">            students:students</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/students/new'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.render(<span class="string">'new.html'</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/students/edit'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">'/students/edit'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/students/delete'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 把router导出</span></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>app.js:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// router(app);</span></span><br><span class="line"><span class="comment">// 把路由容器挂载到app服务中</span></span><br><span class="line"><span class="comment">// 挂载路由</span></span><br><span class="line">app.use(router);</span><br></pre></td></tr></table></figure><h4 id="设计操作数据的API文件模块"><a href="#设计操作数据的API文件模块" class="headerlink" title="设计操作数据的API文件模块"></a>设计操作数据的API文件模块</h4><p>es6中的find和findIndex：</p><p>find接受一个方法作为参数，方法内部返回一个条件</p><p>find会便利所有的元素，执行你给定的带有条件返回值的函数</p><p>符合该条件的元素会作为find方法的返回值</p><p>如果遍历结束还没有符合该条件的元素，则返回undefined<a href="https://github.com/smallC-L-Y/Demo/blob/notes/nodeJS学习笔记.md" target="_blank" rel="noopener">/<img src="" class="lazyload" data-src=""  alt="image-20200313103810731"></a></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * student.js</span></span><br><span class="line"><span class="comment"> * 数据操作文件模块</span></span><br><span class="line"><span class="comment"> * 职责：操作文件中的数据，只处理数据，不关心业务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取所有学生列表</span></span><br><span class="line"><span class="comment">  * return []</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">exports.find = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取添加保存学生</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">exports.save = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新学生</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">exports.update = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除学生</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">exports.delete = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ul><li>处理模板</li><li>配置静态开放资源</li><li>配置模板引擎</li><li>简单的路由，/studens渲染静态页出来</li><li>路由设计</li><li>提取路由模块</li><li>由于接下来的一系列业务操作都需要处理文件数据，所以我们需要封装Student.js’</li><li>先写好student.js文件结构<ul><li>查询所有学生列别哦的API</li><li>findById</li><li>save</li><li>updateById</li><li>deleteById</li></ul></li><li>实现具体功能<ul><li>通过路由收到请求</li><li>接受请求中的参数（get，post）<ul><li>req.query</li><li>req.body</li></ul></li><li>调用数据操作API处理数据</li><li>根据操作结果给客户端发送请求</li></ul></li><li>业务功能顺序<ul><li>列表</li><li>添加</li><li>编辑</li><li>删除</li></ul></li></ul><h4 id="子模板和模板的继承（模板引擎高级语法）【include，extend，block】"><a href="#子模板和模板的继承（模板引擎高级语法）【include，extend，block】" class="headerlink" title="子模板和模板的继承（模板引擎高级语法）【include，extend，block】"></a>子模板和模板的继承（模板引擎高级语法）【include，extend，block】</h4><p>注意:</p><p>模板页：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>模板页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/node_modules/bootstrap/dist/css/bootstrap.css"</span>/&gt;</span></span><br><span class="line">    &#123;&#123; block 'head' &#125;&#125;&#123;&#123; /block &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过include导入公共部分 --&gt;</span></span><br><span class="line">    &#123;&#123;include './header.html'&#125;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 留一个位置 让别的内容去填充 --&gt;</span></span><br><span class="line">    &#123;&#123; block  'content' &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>默认内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    &#123;&#123; /block &#125;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 通过include导入公共部分 --&gt;</span></span><br><span class="line">    &#123;&#123;include './footer.html'&#125;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 公共样式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/node_modules/jquery/dist/jquery.js"</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/node_modules/bootstrap/dist/js/bootstrap.js"</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    &#123;&#123; block 'script' &#125;&#125;&#123;&#123; /block &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>模板的继承：</p><p> header页面：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>公共的头部<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p> footer页面：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>公共的底部<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>模板页的使用：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 继承(extend:延伸，扩展)模板也layout.html --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 把layout.html页面的内容都拿进来作为index.html页面的内容 --&gt;</span></span><br><span class="line">&#123;&#123;extend './layout.html'&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 向模板页面填充新的数据 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 填充后就会替换掉layout页面content中的数据 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- style样式方面的内容 --&gt;</span></span><br><span class="line">&#123;&#123; block 'head' &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        body&#123;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">&#123;&#123; /block &#125;&#125;</span><br><span class="line">&#123;&#123; block 'content' &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Index页面的内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;&#123; /block &#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- js部分的内容 --&gt;</span></span><br><span class="line">&#123;&#123; block 'script' &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;&#123; /block &#125;&#125;</span><br></pre></td></tr></table></figure><p>最终的显示效果：</p><p><a href="https://github.com/smallC-L-Y/Demo/blob/notes/nodeJS学习笔记.md" target="_blank" rel="noopener">/<img src="" class="lazyload" data-src=""  alt="image-20200316134759517"></a></p><h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><h2 id="关系型和非关系型数据库"><a href="#关系型和非关系型数据库" class="headerlink" title="关系型和非关系型数据库"></a>关系型和非关系型数据库</h2><h3 id="关系型数据库（表就是关系，或者说表与表之间存在关系）。"><a href="#关系型数据库（表就是关系，或者说表与表之间存在关系）。" class="headerlink" title="关系型数据库（表就是关系，或者说表与表之间存在关系）。"></a>关系型数据库（表就是关系，或者说表与表之间存在关系）。</h3><ul><li>所有的关系型数据库都需要通过<code>sql</code>语言来操作</li><li>所有的关系型数据库在操作之前都需要设计表结构</li><li>而且数据表还支持约束<ul><li>唯一的</li><li>主键</li><li>默认值</li><li>非空</li></ul></li></ul><h3 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h3><ul><li>非关系型数据库非常的灵活</li><li>有的关系型数据库就是key-value对儿</li><li>但MongDB是长得最像关系型数据库的非关系型数据库<ul><li>数据库 -》 数据库</li><li>数据表 -》 集合（数组）</li><li>表记录 -》文档对象</li></ul></li></ul><p>一个数据库中可以有多个数据库，一个数据库中可以有多个集合（数组），一个集合中可以有多个文档（表记录）</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    qq:&#123;</span><br><span class="line">       user:[</span><br><span class="line">           &#123;&#125;,&#123;&#125;,&#123;&#125;...</span><br><span class="line">       ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>也就是说你可以任意的往里面存数据，没有结构性这么一说</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>下载</p><ul><li>下载地址：<a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener">https://www.mongodb.com/download-center/community</a></li></ul></li><li><p>安装</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i mongoose</span><br></pre></td></tr></table></figure></li><li><p>配置环境变量</p></li><li><p>最后输入<code>mongod --version</code>测试是否安装成功</p></li></ul><h2 id="启动和关闭数据库"><a href="#启动和关闭数据库" class="headerlink" title="启动和关闭数据库"></a>启动和关闭数据库</h2><p>启动：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mongodb 默认使用执行mongod 命令所处盼复根目录下的&#x2F;data&#x2F;db作为自己的数据存储目录</span><br><span class="line"># 所以在第一次执行该命令之前先自己手动新建一个 &#x2F;data&#x2F;db</span><br><span class="line">mongod</span><br></pre></td></tr></table></figure><p>如果想要修改默认的数据存储目录，可以：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongod --dbpath &#x3D; 数据存储目录路径</span><br></pre></td></tr></table></figure><p>停止：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在开启服务的控制台，直接Ctrl+C;</span><br><span class="line">或者直接关闭开启服务的控制台。</span><br></pre></td></tr></table></figure><p><a href="https://github.com/smallC-L-Y/Demo/blob/notes/nodeJS学习笔记.md" target="_blank" rel="noopener">/<img src="" class="lazyload" data-src=""  alt="image-20200314101047100"></a></p><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>连接：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 该命令默认连接本机的 MongoDB 服务</span><br><span class="line">mongo</span><br></pre></td></tr></table></figure><p>退出：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在连接状态输入 exit 退出连接</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p><a href="https://github.com/smallC-L-Y/Demo/blob/notes/nodeJS学习笔记.md" target="_blank" rel="noopener">/<img src="" class="lazyload" data-src=""  alt="image-20200314100821112"></a></p><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul><li><pre><code class="mongodb">show dbs<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 查看数据库列表(数据库中的所有数据库)</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;mongodb</span><br><span class="line">  db</span><br></pre></td></tr></table></figure>- 查看当前连接的数据库</code></pre></li><li><pre><code class="mongodb">use 数据库名称<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 切换到指定的数据库，（如果没有会新建）</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;mongodb</span><br><span class="line">  show collections</span><br></pre></td></tr></table></figure>- 查看当前目录下的所有数据表</code></pre></li><li><pre><code class="mongodb">db.表名.find()<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 查看表中的详细信息</span><br><span class="line"></span><br><span class="line">## 在Node中如何操作MongoDB数据库</span><br><span class="line"></span><br><span class="line">### 使用官方的&#96;MongoDB&#96;包来操作</span><br><span class="line"></span><br><span class="line">&gt;  http:&#x2F;&#x2F;mongodb.github.io&#x2F;node-mongodb-native&#x2F;</span><br><span class="line"></span><br><span class="line">### 使用第三方包&#96;mongoose&#96;来操作MongoDB数据库</span><br><span class="line"></span><br><span class="line"> 第三方包：&#96;mongoose&#96;基于MongoDB官方的&#96;mongodb&#96;包再一次做了封装，名字叫&#96;mongoose&#96;，是WordPress项目团队开发的。</span><br><span class="line"></span><br><span class="line">&gt;  https:&#x2F;&#x2F;mongoosejs.com&#x2F;</span><br><span class="line"></span><br><span class="line">[![image-20200314105632745]()](https:&#x2F;&#x2F;github.com&#x2F;smallC-L-Y&#x2F;Demo&#x2F;blob&#x2F;notes&#x2F;nodeJS学习笔记.md)</span><br><span class="line"></span><br><span class="line">[![image-20200314105717993]()](https:&#x2F;&#x2F;github.com&#x2F;smallC-L-Y&#x2F;Demo&#x2F;blob&#x2F;notes&#x2F;nodeJS学习笔记.md)</span><br><span class="line"></span><br><span class="line">## 学习指南（步骤）</span><br><span class="line"></span><br><span class="line">官方学习文档：https:&#x2F;&#x2F;mongoosejs.com&#x2F;docs&#x2F;index.html</span><br><span class="line"></span><br><span class="line">### 设计Scheme 发布Model (创建表)</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;js</span><br><span class="line">&#x2F;&#x2F; 1.引包</span><br><span class="line">&#x2F;&#x2F; 注意：按照后才能require使用</span><br><span class="line">var mongoose &#x3D; require(&#39;mongoose&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 拿到schema图表</span><br><span class="line">var Schema &#x3D; mongoose.Schema;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2.连接数据库</span><br><span class="line">&#x2F;&#x2F; 指定连接数据库后不需要存在，当你插入第一条数据库后会自动创建数据库</span><br><span class="line">mongoose.connect(&#39;mongodb:&#x2F;&#x2F;localhost&#x2F;test&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 3.设计集合结构（表结构）</span><br><span class="line">&#x2F;&#x2F; 用户表</span><br><span class="line">var userSchema &#x3D; new Schema(&#123;</span><br><span class="line">    username: &#123; &#x2F;&#x2F;姓名</span><br><span class="line">        type: String,</span><br><span class="line">        require: true &#x2F;&#x2F;添加约束，保证数据的完整性，让数据按规矩统一</span><br><span class="line">    &#125;,</span><br><span class="line">    password: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        require: true</span><br><span class="line">    &#125;,</span><br><span class="line">    email: &#123;</span><br><span class="line">        type: String</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 4.将文档结构发布为模型</span><br><span class="line">&#x2F;&#x2F; mongoose.model方法就是用来将一个架构发布为 model</span><br><span class="line">&#x2F;&#x2F;      第一个参数：传入一个大写名词单数字符串用来表示你的数据库的名称</span><br><span class="line">&#x2F;&#x2F;                  mongoose 会自动将大写名词的字符串生成 小写复数 的集合名称</span><br><span class="line">&#x2F;&#x2F;                  例如 这里会变成users集合名称</span><br><span class="line">&#x2F;&#x2F;      第二个参数：架构</span><br><span class="line">&#x2F;&#x2F;  返回值：模型构造函数</span><br><span class="line">var User &#x3D; mongoose.model(&#39;User&#39;, userSchema);</span><br></pre></td></tr></table></figure></code></pre></li></ul><h3 id="添加数据（增）"><a href="#添加数据（增）" class="headerlink" title="添加数据（增）"></a>添加数据（增）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5.通过模型构造函数对User中的数据进行操作</span></span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User(&#123;</span><br><span class="line">    username: <span class="string">'admin'</span>,</span><br><span class="line">    password: <span class="string">'123456'</span>,</span><br><span class="line">    email: <span class="string">'xiaochen@qq.com'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">user.save(<span class="function"><span class="keyword">function</span>(<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'保存失败'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'保存成功'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="删除（删）"><a href="#删除（删）" class="headerlink" title="删除（删）"></a>删除（删）</h3><p>根据条件删除所有：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">User.remove(&#123;</span><br><span class="line">    username: <span class="string">'xiaoxiao'</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'删除失败'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'删除成功'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>根据条件删除一个：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Model.findOneAndRemove(conditions,[options],[callback]);</span><br></pre></td></tr></table></figure><p>根据id删除一个：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User.findByIdAndRemove(id,[options],[callback]);</span><br></pre></td></tr></table></figure><h3 id="更新（改）"><a href="#更新（改）" class="headerlink" title="更新（改）"></a>更新（改）</h3><p>更新所有：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User.remove(conditions,doc,[options],[callback]);</span><br></pre></td></tr></table></figure><p>根据指定条件更新一个：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User.FindOneAndUpdate([conditions],[update],[options],[callback]);</span><br></pre></td></tr></table></figure><p>根据id更新一个：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更新   根据id来修改表数据</span></span><br><span class="line">User.findByIdAndUpdate(<span class="string">'5e6c5264fada77438c45dfcd'</span>, &#123;</span><br><span class="line">    username: <span class="string">'junjun'</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'更新失败'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'更新成功'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="查询（查）"><a href="#查询（查）" class="headerlink" title="查询（查）"></a>查询（查）</h3><p>查询所有：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line">User.find(<span class="function"><span class="keyword">function</span>(<span class="params">err,ret</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'查询失败'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>条件查询所有：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据条件查询</span></span><br><span class="line">User.find(&#123; <span class="attr">username</span>:<span class="string">'xiaoxiao'</span> &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,ret</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'查询失败'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>条件查询单个：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 按照条件查询单个，查询出来的数据是一个对象（&#123;&#125;）</span></span><br><span class="line"><span class="comment">// 没有条件查询使用findOne方法，查询的是表中的第一条数据</span></span><br><span class="line">User.findOne(&#123;</span><br><span class="line">    username: <span class="string">'xiaoxiao'</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'查询失败'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="使用Node操作MySQL数据库"><a href="#使用Node操作MySQL数据库" class="headerlink" title="使用Node操作MySQL数据库"></a>使用Node操作MySQL数据库</h1><p>文档：<a href="https://www.npmjs.com/package/mysql" target="_blank" rel="noopener">https://www.npmjs.com/package/mysql</a></p><p>安装：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install --save  mysql</span><br><span class="line"><span class="comment">// 引入mysql包</span></span><br><span class="line"><span class="keyword">var</span> mysql      = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="keyword">var</span> connection = mysql.createConnection(&#123;</span><br><span class="line">  host     : <span class="string">'localhost'</span>,   <span class="comment">//本机</span></span><br><span class="line">  user     : <span class="string">'me'</span>,      <span class="comment">//账号root</span></span><br><span class="line">  password : <span class="string">'secret'</span>,  <span class="comment">//密码12345</span></span><br><span class="line">  database : <span class="string">'my_db'</span>    <span class="comment">//数据库名</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 连接数据库    （打开冰箱门）</span></span><br><span class="line">connection.connect();</span><br><span class="line"> </span><br><span class="line"><span class="comment">//执行数据操作    （把大象放到冰箱）</span></span><br><span class="line">connection.query(<span class="string">'SELECT * FROM `users` '</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;<span class="comment">//抛出异常阻止代码往下执行</span></span><br><span class="line">  <span class="comment">// 没有异常打印输出结果</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'The solution is: '</span>,results);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭连接  （关闭冰箱门）</span></span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure><h1 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h1><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>不成立的情况下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">var</span> ret = x + y;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">//到这里执行就结束了，不会i等到前面的定时器，所以直接返回了默认值 undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line"><span class="comment">// 结果是 1 3 undefined 4</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/smallC-L-Y/Demo/blob/notes/nodeJS学习笔记.md" target="_blank" rel="noopener">/<img src="" class="lazyload" data-src=""  alt="image-20200313085008929"></a></p><p>使用回调函数解决：</p><p>回调函数：通过一个函数，获取函数内部的操作。（根据输入得到输出结果）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ret;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y,callback</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// callback就是回调函数</span></span><br><span class="line">    <span class="comment">// var x = 10;</span></span><br><span class="line">    <span class="comment">// var y = 20;</span></span><br><span class="line">    <span class="comment">// var callback = function(ret)&#123;console.log(ret);&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ret = x + y;</span><br><span class="line">        callback(ret);</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">10</span>,<span class="number">20</span>,<span class="function"><span class="keyword">function</span>(<span class="params">ret</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ret);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="https://github.com/smallC-L-Y/Demo/blob/notes/nodeJS学习笔记.md" target="_blank" rel="noopener">/<img src="" class="lazyload" data-src=""  alt="image-20200313084746701"></a></p><p>注意：</p><p> 凡是需要得到一个函数内部异步操作的结果（setTimeout,readFile,writeFile,ajax,readdir）</p><p> 这种情况必须通过 回调函数 (异步API都会伴随着一个回调函数)</p><p>ajax:</p><p>基于原生XMLHttpRequest封装get方法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oReq = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">// 当请求加载成功要调用指定的函数</span></span><br><span class="line">oReq.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(oReq.responseText);</span><br><span class="line">&#125;</span><br><span class="line">oReq.open(<span class="string">"GET"</span>, <span class="string">"请求路径"</span>,<span class="literal">true</span>);</span><br><span class="line">oReq.send();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url,callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oReq = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    <span class="comment">// 当请求加载成功要调用指定的函数</span></span><br><span class="line">    oReq.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//console.log(oReq.responseText);</span></span><br><span class="line">        callback(oReq.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">    oReq.open(<span class="string">"GET"</span>, url,<span class="literal">true</span>);</span><br><span class="line">    oReq.send();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">get</span>('data.json',function(data)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>callback hell（回调地狱）:</p><p><a href="https://github.com/smallC-L-Y/Demo/blob/notes/nodeJS学习笔记.md" target="_blank" rel="noopener">/<img src="" class="lazyload" data-src=""  alt="image-20200314143410972"></a></p><p>文件的读取无法判断执行顺序（文件的执行顺序是依据文件的大小来决定的）(异步api无法保证文件的执行顺序)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./data/a.text'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="comment">// 1 读取失败直接打印输出读取失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'读取失败'</span>);</span><br><span class="line">        <span class="comment">// 2 抛出异常</span></span><br><span class="line">        <span class="comment">//      阻止程序的执行</span></span><br><span class="line">        <span class="comment">//      把错误信息打印到控制台</span></span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./data/b.text'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="comment">// 1 读取失败直接打印输出读取失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'读取失败'</span>);</span><br><span class="line">        <span class="comment">// 2 抛出异常</span></span><br><span class="line">        <span class="comment">//      阻止程序的执行</span></span><br><span class="line">        <span class="comment">//      把错误信息打印到控制台</span></span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>通过回调嵌套的方式来保证顺序：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./data/a.text'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="comment">// 1 读取失败直接打印输出读取失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'读取失败'</span>);</span><br><span class="line">        <span class="comment">// 2 抛出异常</span></span><br><span class="line">        <span class="comment">//      阻止程序的执行</span></span><br><span class="line">        <span class="comment">//      把错误信息打印到控制台</span></span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    fs.readFile(<span class="string">'./data/b.text'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="comment">// 1 读取失败直接打印输出读取失败</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'读取失败'</span>);</span><br><span class="line">            <span class="comment">// 2 抛出异常</span></span><br><span class="line">            <span class="comment">//      阻止程序的执行</span></span><br><span class="line">            <span class="comment">//      把错误信息打印到控制台</span></span><br><span class="line">            <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">        fs.readFile(<span class="string">'./data/a.text'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                <span class="comment">// 1 读取失败直接打印输出读取失败</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'读取失败'</span>);</span><br><span class="line">                <span class="comment">// 2 抛出异常</span></span><br><span class="line">                <span class="comment">//      阻止程序的执行</span></span><br><span class="line">                <span class="comment">//      把错误信息打印到控制台</span></span><br><span class="line">                <span class="keyword">throw</span> err;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="https://github.com/smallC-L-Y/Demo/blob/notes/nodeJS学习笔记.md" target="_blank" rel="noopener">/<img src="" class="lazyload" data-src=""  alt="image-20200314144807008"></a>为了解决以上编码方式带来的问题（回调地狱嵌套），所以在EcmaScript6新增了一个API:<code>Promise</code>。<a href="https://github.com/smallC-L-Y/Demo/blob/notes/nodeJS学习笔记.md" target="_blank" rel="noopener">/<img src="" class="lazyload" data-src=""  alt="image-20200314150050839"></a></p><ul><li>Promise：承诺，保证</li><li>Promise本身不是异步的，但往往都是内部封装一个异步任务</li></ul><p>基本语法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在EcmaScript 6中新增了一个API Promise</span></span><br><span class="line"><span class="comment">// Promise 是一个构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 1 创建Promise容器        resolve:解决   reject：失败</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">'./a.text'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="comment">// console.log(err);</span></span><br><span class="line">            <span class="comment">// 把容器的Pending状态变为rejected</span></span><br><span class="line">            reject(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// console.log(data);</span></span><br><span class="line">            <span class="comment">// 把容器的Pending状态变为resolve</span></span><br><span class="line">            resolve(<span class="number">1234</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当p1成功了，然后就（then）做指定的操作</span></span><br><span class="line"><span class="comment">// then方法接收的function就是容器中的resolve函数</span></span><br><span class="line">p1</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'读取文件失败了'</span>, err);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p><a href="https://github.com/smallC-L-Y/Demo/blob/notes/nodeJS学习笔记.md" target="_blank" rel="noopener">/<img src="" class="lazyload" data-src=""  alt="image-20200315100611620"></a></p><p>链式循环：<a href="https://github.com/smallC-L-Y/Demo/blob/notes/nodeJS学习笔记.md" target="_blank" rel="noopener">/<img src="" class="lazyload" data-src=""  alt="image-20200315125559136"></a></p><p>封装Promise的<code>readFile</code>：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pReadFile</span>(<span class="params">filePath</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        fs.readFile(filePath, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                resolve(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pReadFile(<span class="string">'./a.txt'</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">        <span class="keyword">return</span> pReadFile(<span class="string">'./b.txt'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">        <span class="keyword">return</span> pReadFile(<span class="string">'./a.txt'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>mongoose所有的API都支持Promise：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line">User.find()</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>注册：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">User.findOne(&#123;<span class="attr">username</span>:<span class="string">'admin'</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">user</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(user)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'用户已存在'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> User(&#123;</span><br><span class="line">             username:<span class="string">'aaa'</span>,</span><br><span class="line">             password:<span class="string">'123'</span>,</span><br><span class="line">             email:<span class="string">'fffff'</span></span><br><span class="line">        &#125;).save(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'注册成功'</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">User.findOne(&#123;</span><br><span class="line">    username:<span class="string">'admin'</span></span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(user)&#123;</span><br><span class="line">            <span class="comment">// 用户已经存在不能注册</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'用户已存在'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 用户不存在可以注册</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User(&#123;</span><br><span class="line">                username:<span class="string">'aaa'</span>,</span><br><span class="line">                password:<span class="string">'123'</span>,</span><br><span class="line">                email:<span class="string">'fffff'</span></span><br><span class="line">            &#125;).save();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(funciton(ret)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'注册成功'</span>);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><p>async函数</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="修改完代码自动重启"><a href="#修改完代码自动重启" class="headerlink" title="修改完代码自动重启"></a>修改完代码自动重启</h2><p>我们在这里可以使用一个第三方命名行工具：<code>nodemon</code>来帮助我们解决频繁修改代码重启服务器的问题。</p><p><code>nodemon</code>是一个基于Node.js开发的一个第三方命令行工具，我们使用的时候需要独立安装：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#在任意目录执行该命令都可以</span><br><span class="line">#也就是说，所有需要 --global安装的包都可以在任意目录执行</span><br><span class="line">npm install --global nodemon</span><br><span class="line">npm install -g nodemon</span><br><span class="line"></span><br><span class="line">#如果安装不成功的话，可以使用cnpm安装</span><br><span class="line">cnpm install -g nodemon</span><br></pre></td></tr></table></figure><p>安装完毕之后使用：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node app.js</span><br><span class="line"></span><br><span class="line">#使用nodemon</span><br><span class="line">nodemon app.js</span><br></pre></td></tr></table></figure><p>只要是通过<code>nodemon</code>启动的服务，则他会监视你的文件变化，当文件发生变化的时候，会自动帮你重启服务器。</p><h2 id="封装异步API"><a href="#封装异步API" class="headerlink" title="封装异步API"></a>封装异步API</h2><p>回调函数：获取异步操作的结果</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// var callback = funtion(data)&#123; console.log(data); &#125;</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> data = <span class="string">'hello'</span>;</span><br><span class="line">        callback(data);</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果需要获取一个函数中异步操作的结果，则必须通过回调函数的方式来获取</span></span><br><span class="line">fn(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="数组的遍历方法，都是对函数作为一种参数"><a href="#数组的遍历方法，都是对函数作为一种参数" class="headerlink" title="数组的遍历方法，都是对函数作为一种参数"></a>数组的遍历方法，都是对函数作为一种参数</h2><p><a href="https://github.com/smallC-L-Y/Demo/blob/notes/nodeJS学习笔记.md" target="_blank" rel="noopener">/<img src="" class="lazyload" data-src=""  alt="image-20200314094620191"></a></p><h2 id="EcmaScript-6"><a href="#EcmaScript-6" class="headerlink" title="EcmaScript 6"></a>EcmaScript 6</h2><blockquote><p>参考文档：<a href="https://es6.ruanyifeng.com/" target="_blank" rel="noopener">https://es6.ruanyifeng.com/</a></p></blockquote><h1 id="项目案例"><a href="#项目案例" class="headerlink" title="项目案例"></a>项目案例</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">app.js  项目的入口文件</span><br><span class="line">controllers</span><br><span class="line">models  存储使用mongoose设计的数据模型</span><br><span class="line">node_modules    第三方包</span><br><span class="line">package.json    包描述文件</span><br><span class="line">package-lock.json   第三方包版本锁定文件（npm5之后才有）</span><br><span class="line">public  公共静态资源</span><br><span class="line">routes</span><br><span class="line">views   存储视图目录</span><br></pre></td></tr></table></figure><h2 id="模板页"><a href="#模板页" class="headerlink" title="模板页"></a>模板页</h2><ul><li>子模板</li><li>模板继承</li></ul><h2 id="路由设计-1"><a href="#路由设计-1" class="headerlink" title="路由设计"></a>路由设计</h2><table><thead><tr><th>路由</th><th>方法</th><th>get参数</th><th>post参数</th><th>是否需要登录</th><th>备注</th></tr></thead><tbody><tr><td>/</td><td>get</td><td></td><td></td><td></td><td>渲染首页</td></tr><tr><td>/register(登录)</td><td>get</td><td></td><td></td><td></td><td>渲染注册页面</td></tr><tr><td>/register</td><td>post</td><td></td><td>email,nickname,password</td><td></td><td>处理注册请求</td></tr><tr><td>/login</td><td>get</td><td></td><td></td><td></td><td>渲染登陆界面</td></tr><tr><td>/login</td><td>post</td><td></td><td>email,password</td><td></td><td>处理登录请求</td></tr><tr><td>/loginout</td><td>get</td><td></td><td></td><td></td><td>处理退出请求</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="模型设计"><a href="#模型设计" class="headerlink" title="模型设计"></a>模型设计</h2><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h2 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h2><ul><li>创建目录结构</li><li>整合静态也-模板页<ul><li>include</li><li>block</li><li>extend</li></ul></li><li>设计用户登陆，退出，注册的路由</li><li>用户注册<ul><li>先处理客户端页面的内容（表单控件的name，收集表单数据，发起请求）</li><li>服务端<ul><li>获取从客户端收到的数据</li><li>操作数据库<ul><li>如果有错，发送500告诉客户端服务器错了‘</li><li>其他的根据业务发送不同的响应数据</li></ul></li></ul></li></ul></li><li>登录</li><li>退出</li></ul><h1 id="Express中间件"><a href="#Express中间件" class="headerlink" title="Express中间件"></a>Express中间件</h1><h2 id="中间件的概念"><a href="#中间件的概念" class="headerlink" title="中间件的概念"></a>中间件的概念</h2><blockquote><p>参考文档：<a href="http://expressjs.com/en/guide/using-middleware.html" target="_blank" rel="noopener">http://expressjs.com/en/guide/using-middleware.html</a></p></blockquote><p><a href="https://github.com/smallC-L-Y/Demo/blob/notes/nodeJS学习笔记.md" target="_blank" rel="noopener">/<img src="" class="lazyload" data-src=""  alt="image-20200316202757617"></a></p><p>中间件：把很复杂的事情分割成单个，然后依次有条理的执行。就是一个中间处理环节，有输入，有输出。</p><p>说的通俗易懂点儿，中间件就是一个（从请求到响应调用的方法）方法。</p><p>把数据从请求到响应分步骤来处理，每一个步骤都是一个中间处理环节。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cookie = <span class="built_in">require</span>(<span class="string">'./expressPtoject/cookie'</span>);</span><br><span class="line"><span class="keyword">var</span> query = <span class="built_in">require</span>(<span class="string">'./expressPtoject/query'</span>);</span><br><span class="line"><span class="keyword">var</span> postBody = <span class="built_in">require</span>(<span class="string">'./expressPtoject/post-body'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 解析请求地址中的get参数</span></span><br><span class="line">    <span class="comment">// var obj = url.parse(req.url,true);</span></span><br><span class="line">    <span class="comment">// req.query = obj.query;</span></span><br><span class="line">    query(req,res); <span class="comment">//中间件</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 解析请求地址中的post参数</span></span><br><span class="line">    req.body = &#123;</span><br><span class="line">        foo:<span class="string">'bar'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(req.url === <span class="string">'xxx'</span>)&#123;</span><br><span class="line">    <span class="comment">// 处理请求</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'3000 runing...'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>同一个请求对象所经过的中间件都是同一个请求对象和响应对象。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.get(<span class="string">'/abc'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 同一个请求的req和res是一样的，</span></span><br><span class="line">    <span class="comment">// 可以前面存储下面调用</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'/abc'</span>);</span><br><span class="line">    <span class="comment">// req.foo = 'bar';</span></span><br><span class="line">    req.body = &#123;</span><br><span class="line">        name:<span class="string">'xiaoxiao'</span>,</span><br><span class="line">        age:<span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">'/abc'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// console.log(req.foo);</span></span><br><span class="line">    <span class="built_in">console</span>.log(req.body);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'/abc'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'app is running at port 3000.'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="https://github.com/smallC-L-Y/Demo/blob/notes/nodeJS学习笔记.md" target="_blank" rel="noopener">/<img src="" class="lazyload" data-src=""  alt="image-20200317110520098"></a></p><h2 id="中间件的分类"><a href="#中间件的分类" class="headerlink" title="中间件的分类:"></a>中间件的分类:</h2><h3 id="应用程序级别的中间件"><a href="#应用程序级别的中间件" class="headerlink" title="应用程序级别的中间件"></a>应用程序级别的中间件</h3><p>万能匹配（不关心任何请求路径和请求方法的中间件）：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Time'</span>,<span class="built_in">Date</span>.now());</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>关心请求路径和请求方法的中间件：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.use(<span class="string">'/a'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Time'</span>,<span class="built_in">Date</span>.now());</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="路由级别的中间件"><a href="#路由级别的中间件" class="headerlink" title="路由级别的中间件"></a>路由级别的中间件</h3><p>严格匹配请求路径和请求方法的中间件</p><p>get:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">'get'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>post：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.post(<span class="string">'/a'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">'post'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>put:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.put(<span class="string">'/user'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">'put'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>delete:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.delete(<span class="string">'/delete'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">'delete'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="总"><a href="#总" class="headerlink" title="总"></a>总</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间件：处理请求，本质就是个函数</span></span><br><span class="line"><span class="comment">// 在express中，对中间件有几种分类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 不关心任何请求路径和请求方法的中间件</span></span><br><span class="line"><span class="comment">// 也就是说任何请求都会进入这个中间件</span></span><br><span class="line"><span class="comment">// 中间件本身是一个方法，该方法接收三个参数</span></span><br><span class="line"><span class="comment">// Request 请求对象</span></span><br><span class="line"><span class="comment">// Response 响应对象</span></span><br><span class="line"><span class="comment">// next 下一个中间件</span></span><br><span class="line"><span class="comment">// // 全局匹配中间件</span></span><br><span class="line"><span class="comment">// app.use(function(req, res, next) &#123;</span></span><br><span class="line"><span class="comment">//  console.log('1');</span></span><br><span class="line"><span class="comment">//  // 当一个请求进入中间件后</span></span><br><span class="line"><span class="comment">//  // 如果需要请求另外一个方法则需要使用next（）方法</span></span><br><span class="line"><span class="comment">//  next();</span></span><br><span class="line"><span class="comment">//  // next是一个方法，用来调用下一个中间件</span></span><br><span class="line"><span class="comment">//  // 注意：next（）方法调用下一个方法的时候，也会匹配（不是调用紧挨着的哪一个）</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// app.use(function(req, res, next) &#123;</span></span><br><span class="line"><span class="comment">//  console.log('2');</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// // 2 关心请求路径的中间件</span></span><br><span class="line"><span class="comment">// // 以/xxx开头的中间件</span></span><br><span class="line"><span class="comment">// app.use('/a',function(req, res, next) &#123;</span></span><br><span class="line"><span class="comment">//  console.log(req.url);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 严格匹配请求方法和请求路径的中间件</span></span><br><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'/'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.post(<span class="string">'/a'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'/a'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'app is running at port 3000.'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="错误处理中间件"><a href="#错误处理中间件" class="headerlink" title="错误处理中间件"></a>错误处理中间件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err,req,res,next</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err,stack);</span><br><span class="line">    res.status(<span class="number">500</span>).send(<span class="string">'Something broke'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>配置使用404中间件：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.render(<span class="string">'404.html'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>配置全局错误处理中间件:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">'/a'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">'.a/bc'</span>, funtion() &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="comment">// 当调用next()传参后，则直接进入到全局错误处理中间件方法中</span></span><br><span class="line">            <span class="comment">// 当发生全局错误的时候，我们可以调用next传递错误对象</span></span><br><span class="line">            <span class="comment">// 然后被全局错误处理中间件匹配到并进行处理</span></span><br><span class="line">            next(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//全局错误处理中间件</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err,req,res,next</span>)</span>&#123;</span><br><span class="line">    res.status(<span class="number">500</span>).json(&#123;</span><br><span class="line">        err_code:<span class="number">500</span>,</span><br><span class="line">        message:err.message</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="内置中间件"><a href="#内置中间件" class="headerlink" title="内置中间件"></a>内置中间件</h2><ul><li>express.static(提供静态文件)<ul><li><a href="http://expressjs.com/en/starter/static-files.html#serving-static-files-in-express" target="_blank" rel="noopener">http://expressjs.com/en/starter/static-files.html#serving-static-files-in-express</a></li></ul></li></ul><h2 id="第三方中间件"><a href="#第三方中间件" class="headerlink" title="第三方中间件"></a>第三方中间件</h2><blockquote><p>参考文档：<a href="http://expressjs.com/en/resources/middleware.html" target="_blank" rel="noopener">http://expressjs.com/en/resources/middleware.html</a></p></blockquote><ul><li>body-parser</li><li>compression</li><li>cookie-parser</li><li>mogran</li><li>response-time</li><li>server-static</li><li>session</li></ul>]]></content>
      
      
      <categories>
          
          <category> node学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
            <tag> nodejs </tag>
            
            <tag> JavaScript </tag>
            
            <tag> express </tag>
            
            <tag> Ip </tag>
            
            <tag> webpack </tag>
            
            <tag> mongodb </tag>
            
            <tag> mongoose </tag>
            
            <tag> 中间件 </tag>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记</title>
      <link href="/2019/10/26/vue/"/>
      <url>/2019/10/26/vue/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> webpack </tag>
            
            <tag> Vuejs </tag>
            
            <tag> es6 </tag>
            
            <tag> element </tag>
            
            <tag> vue-cli </tag>
            
            <tag> vuex </tag>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack</title>
      <link href="/2019/10/26/webpack4.42.1/"/>
      <url>/2019/10/26/webpack4.42.1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol><li><p>webpack前端自动化构建工具，实现资源的合并，打包，压缩，混淆等诸多功能</p></li><li><p>能够处理文件相互依赖关系</p></li><li><p>能够解决js兼容问题，把高级的，浏览器不识别的语法转换成高级浏览器可以识别的语法</p></li></ol><p><img src="/" class="lazyload" data-src="http://q9c3c6b0h.bkt.clouddn.com/image-20200419102000890.png"  alt="image-20200419102000890"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. npm install webpack -g</span><br><span class="line"></span><br><span class="line">2. npm install webpack-cli -g</span><br></pre></td></tr></table></figure><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><p><img src="/" class="lazyload" data-src="http://q9c3c6b0h.bkt.clouddn.com/image-20200419102043588.png"  alt="image-20200419102043588"></p><ul><li><p><em>将main.js打包输出到dist目录</em></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack .&#x2F;src&#x2F;main.js -o .&#x2F;dist&#x2F;bundle.js</span><br></pre></td></tr></table></figure></li><li><p>index.html引用bundle.js即可使用</p></li></ul><h3 id="webpack-dev-server的使用"><a href="#webpack-dev-server的使用" class="headerlink" title="webpack-dev-server的使用"></a>webpack-dev-server的使用</h3><ol><li><p>npm install webpack-dev-server -D</p><ol><li><pre><code class="tex">即--dev（生产）包名会被注册在package.json的devDependencies里面，仅在开发环境下存在的包用-D，如babel，sass-loader这些解析器<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. webpack-dev-server工具，实现自动打包编译功能，和webpack用法一样</span><br><span class="line"></span><br><span class="line">3. webpack-dev-server 帮我们打包的bundle.js文件，并没有放到实际的物理磁盘上，而是，直接托管到电脑的内存中，所以，我们在项目根目录中，无法找到这个文件的</span><br><span class="line"></span><br><span class="line">   ####webpack-dev-server配置命令</span><br><span class="line"></span><br><span class="line">   1. 在package.json中加入，使用时npm run dev</span><br><span class="line">      1. ![image-20200419153037801](http:&#x2F;&#x2F;q9c3c6b0h.bkt.clouddn.com&#x2F;image-20200419153037801.png)</span><br><span class="line">      2. --open 自动打开浏览器   --port 设置端口号  --contentBase src 设置src为默认启动 --hot热加载浏览器不刷新</span><br><span class="line">   2. 第二种方式*了解*，**推荐第一种**</span><br><span class="line">      1. ![image-20200419154226826](http:&#x2F;&#x2F;q9c3c6b0h.bkt.clouddn.com&#x2F;image-20200419154226826.png)</span><br><span class="line"></span><br><span class="line">   ### html-webpack-plugin</span><br><span class="line"></span><br><span class="line">   - 作用：</span><br><span class="line">     - 自动在内存中根据指定页面生成一个内存页面，自动引入bundle.js文件到页面中去</span><br><span class="line"></span><br><span class="line">   1. 引入到webpack.config.js中</span><br><span class="line"></span><br><span class="line">   2. &#96;&#96;&#96;js</span><br><span class="line">      plugins: [</span><br><span class="line">        new htmlWebpackPlugin(&#123;</span><br><span class="line">         template: path.join(__dirname, &quot;.&#x2F;src&#x2F;index.html&quot;),</span><br></pre></td></tr></table></figure></code></pre></li></ol></li></ol><h3 id="css-less-scss使用"><a href="#css-less-scss使用" class="headerlink" title="css,less,scss使用"></a>css,less,scss使用</h3><ul><li>安装相关loader</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: path.join(__dirname, <span class="string">"./src/main.js"</span>),</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname, <span class="string">"./dist"</span>),</span><br><span class="line">    filename: <span class="string">"bundle.js"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    <span class="comment">//这个节点，用于配置所有第三方模块加载器</span></span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">//配置css规则,从右到左调用</span></span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>] &#125;,</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.less$/</span>, <span class="attr">use</span>: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>, <span class="string">"less-loader"</span>] &#125;,</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>, <span class="attr">use</span>: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>, <span class="string">"sass-loader"</span>] &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">      template: path.join(__dirname, <span class="string">"./src/index.html"</span>),</span><br><span class="line">      filename: <span class="string">"index.html"</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h3><p><img src="/" class="lazyload" data-src="http://q9c3c6b0h.bkt.clouddn.com/image-20200420095504583.png"  alt="image-20200420095504583"></p><p>[hash:8]-[name].[ext] 不重复显示图片</p><h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><blockquote><p><a href="https://www.webpackjs.com/guides/installation/" target="_blank" rel="noopener">webpack官方文档</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mongodb</title>
      <link href="/2019/09/27/mongodb/"/>
      <url>/2019/09/27/mongodb/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql</title>
      <link href="/2019/04/26/mysql/"/>
      <url>/2019/04/26/mysql/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="基本练习"><a href="#基本练习" class="headerlink" title="基本练习"></a>基本练习</h2><ul><li>创建一个student表，要求如下：<br>  (1)student(sno,sname,sage,ssex,sdept),其中sno为学号，设置为主键；<br>  （2）sage为年龄字段，要求只能输入0-120之间的数值。<br>  （3）ssex为性别字段，该字段的约束条件为：只能为男或女。<br>  （4）sdept为所在系别字段，默认值为”计算机”。<br>  （5）sname字段不能为空。<br>2、向student表中添加一个属性列：籍贯，默认值为：安阳<br>3、向student表中插入一条记录：学号为‘00110’，姓名为：“刘畅”，其它为默认值。<br>4、将课程号为‘c02’的所占学分设置为‘3’学分。<br>5、将男生信息表中的年龄不小于24岁的学生信息删除。<br>6、查询单名且姓“刘”的同学的信息<br>7、查询选修了“C03”号课程的学生学号及其成绩，查询结果按成绩升序排列，成绩相同的按年龄的降序排序。<br>8、查询CS系所有男同学考C05课程的成绩，列出这些学生的学号，姓名，成绩并按成绩降序排列。<br>9、检索选修了‘数据库’课程的学生的姓名。<br>10、检索选修了课程号为C01或C02的课程，且成绩高于或等于70分的学生的姓名，课程名和成绩。<br>11、查询3人以上选修的每一门课的平均分，最高分，最低分；<br>12、查询每门课程的平均分，最高分和最低分。<br>13、查询年龄不大于吕凯的男生的学生信息。</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database Test2</span><br><span class="line"></span><br><span class="line">use Test2</span><br><span class="line"></span><br><span class="line">create table student(</span><br><span class="line">    sno char(8) primary key,</span><br><span class="line">    sage smallint check (sage between 0 and 120),</span><br><span class="line">    ssex char(4) check (ssex in (&#39;男&#39;,&#39;女&#39;)),</span><br><span class="line">    sdept char(8) default &#39;计算机&#39;,</span><br><span class="line">    sname char(8) not null</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">alter table student add 籍贯 char(10) default &#39;安阳&#39;</span><br><span class="line"></span><br><span class="line">select * from student</span><br><span class="line"></span><br><span class="line">insert into student (sno,sname) values (&#39;00110&#39;,&#39;刘畅&#39;)</span><br><span class="line"></span><br><span class="line">use Test</span><br><span class="line"></span><br><span class="line">update course set credit&#x3D;3 where cno&#x3D;&#39;c02&#39;</span><br><span class="line"></span><br><span class="line">delete from student where ssex&#x3D;&#39;m&#39; and sage&gt;&#x3D;24</span><br><span class="line"></span><br><span class="line">select * from student where sname like &#39;刘_&#39;</span><br><span class="line"></span><br><span class="line">select sc.sno,grade from student,sc where student.sno&#x3D;sc.sno and cno&#x3D;&#39;c03&#39; order by grade,sage DESC</span><br><span class="line"></span><br><span class="line">select sc.sno,sname,grade from student,sc where student.sno&#x3D;sc.sno and sdept&#x3D;&#39;cs&#39; and ssex&#x3D;&#39;m&#39;</span><br><span class="line">and cno&#x3D;&#39;c05&#39; order by grade DESC</span><br><span class="line"></span><br><span class="line">select sname from student,sc,course where student.sno&#x3D;sc.sno and sc.cno&#x3D;course.cno</span><br><span class="line">and cname&#x3D;&#39;数据库&#39;</span><br><span class="line"></span><br><span class="line">select sname from student where sno in </span><br><span class="line">(select sno from sc where cno in </span><br><span class="line">(select cno from course where cname&#x3D;&#39;高数&#39;))</span><br><span class="line"></span><br><span class="line">select sname,cname,grade from student,sc,course where student.sno&#x3D;sc.sno and sc.cno&#x3D;course.cno</span><br><span class="line">and sc.cno in (&#39;c01&#39;,&#39;c02&#39;) and grade&gt;&#x3D;70</span><br><span class="line"></span><br><span class="line">select AVG(grade),MAX(grade),MIN(grade) from sc group by cno having COUNT(*)&gt;3</span><br><span class="line"></span><br><span class="line">select cno,AVG(grade) 平均分,MAX(grade) 最高分,MIN(grade) 最低分 from sc group by cno</span><br><span class="line"></span><br><span class="line">select * from student where sage &lt; (select sage from student where sname&#x3D;&#39;吕凯&#39;) and ssex&#x3D;&#39;m&#39;</span><br></pre></td></tr></table></figure><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p>1、建立一个存储过程P1，查询某门课程平均分数（课程号，平均成绩）(带一个参数)。<br>2、建立一个存储过程P2可以给COURSE表中添加记录（三个参数）。</p><p>1、创建一个sc表，要求如下：<br>（1）sc(sno,cno,grade),其中主键为sno和cno；<br>（2）成绩grade取值只能在0-100之间。<br>（3）成绩的默认值为0</p><p>2、将student表中女生的年龄均增加一岁（使用update）</p><p>3、向sc表中插入一条记录：学号为‘00110’，课程号为：“c03”，其它为默认值。</p><p>4、将课程号为‘c08’的所占学分设置为‘3’学分。</p><p>5、将学生信息表student中男生的年龄在21-24岁的学生信息删除。</p><p>6、查询姓“王”的同学的信息</p><p>7、查询班内年龄最小的三位同学的信息</p><p>8、查询选修了“C03”号课程的学生学号及选修课程及相应成绩，查询结果按成绩升序排序。</p><p>8、查询ms系所有女同学考C05课程的成绩，列出这些学生的学号，姓名，成绩并按成绩降序排列。</p><p>9、检索选修了‘数据库’课程的学生的学号，年龄，所选课程名及相应成绩等信息。</p><p>10、检索同时选修了课程号为C03或C05两门课程，且两科成绩均不低于70分的学生的相应信息。</p><p>11、查询选修了2门以上课程的学生学号。</p><p>12、查询每位同学的的平均分，最高分和最低分。</p><p>13、查询年龄不小于刘姗姗的男生的学生信息。</p><p>14、查询选修了课程的学生人数。</p><p>15、查询没有选课的学生的信息。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use Test</span><br><span class="line"></span><br><span class="line">create proc p1(@cno char(8)) as </span><br><span class="line">select cno, AVG(grade)平均分数 from sc where cno&#x3D;@cno group by cno</span><br><span class="line"></span><br><span class="line">exec p1 @cno&#x3D;&#39;c02&#39;</span><br><span class="line"></span><br><span class="line">create proc p2(@cno char(10),@cname varchar(20),@credit smallint) as</span><br><span class="line">insert into course (cno,cname,credit) values (@cno,@cname,@credit)</span><br><span class="line"></span><br><span class="line">exec p2 @cno&#x3D;&#39;c24&#39;, @credit&#x3D;99, @cname&#x3D;&#39;蒋正阳&#39;</span><br><span class="line">exec p2 &#39;c23&#39;, &#39;蒋正阳&#39;, 8</span><br><span class="line">select * from course where cname&#x3D;&#39;蒋正阳&#39;</span><br><span class="line"></span><br><span class="line">create table sc2(</span><br><span class="line">    sno char(10),</span><br><span class="line">    cno char(10),</span><br><span class="line">    grade smallint check(grade between 0 and 100) default 0,</span><br><span class="line">    primary key(sno,cno)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">drop table sc2</span><br><span class="line"></span><br><span class="line">update student set sage&#x3D;sage+1 where ssex&#x3D;&#39;f&#39;</span><br><span class="line">update student set sage&#x3D;sage-1 where ssex&#x3D;&#39;f&#39;</span><br><span class="line">select * from student where ssex&#x3D;&#39;f&#39;</span><br><span class="line"></span><br><span class="line">insert into sc (sno,cno) values (&#39;00110&#39;,&#39;c03&#39;)</span><br><span class="line"></span><br><span class="line">update course set credit&#x3D;3 where cno&#x3D;&#39;c08&#39;</span><br><span class="line"></span><br><span class="line">select * from student where ssex&#x3D;&#39;m&#39; and sage between 21 and 24</span><br><span class="line">delete student where ssex&#x3D;&#39;m&#39; and sage between 21 and 24</span><br><span class="line"></span><br><span class="line">select * from student where sname&#x3D;&#39;王%&#39;</span><br><span class="line"></span><br><span class="line">select top 3 * from student order by sage</span><br><span class="line"></span><br><span class="line">select sno,cno,grade from sc where cno&#x3D;&#39;c03&#39; order by grade</span><br><span class="line"></span><br><span class="line">select student.sno,sname,grade from student, sc where student.sno&#x3D;sc.sno and sdept&#x3D;&#39;cs&#39; and ssex&#x3D;&#39;f&#39; and cno&#x3D;&#39;c05&#39;</span><br><span class="line"> </span><br><span class="line">select sc.sno,sage,cname,grade from student,sc,course where student.sno&#x3D;sc.sno and sc.cno&#x3D;course.cno and cname&#x3D;&#39;毛泽东思想&#39;</span><br><span class="line"></span><br><span class="line">select * from student,sc where student.sno&#x3D;sc.sno and cno in (&#39;c03&#39;,&#39;c05&#39;) and grade &gt; 70</span><br><span class="line"></span><br><span class="line">select sno from sc group by sno having count(*)&gt;2</span><br><span class="line"></span><br><span class="line">select avg(grade),max(grade),min(grade) from sc group by sno</span><br><span class="line"></span><br><span class="line">select * from student where sage &gt;&#x3D; (select sage from student where sname&#x3D;&#39;刘珊珊&#39;)</span><br><span class="line"></span><br><span class="line">select count(cno) from student left join sc on student.sno&#x3D;sc.sno where cno is not null</span><br><span class="line"></span><br><span class="line">select * from student left join sc on student.sno&#x3D;sc.sno where cno is null</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
